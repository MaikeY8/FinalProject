/** Required package class namespace */
package rockpaperscissors;

/** Required imports */
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.Timer;

/**
 * The main JFrame where the rock paper scissors game takes place. When the user
 * presses any of the three of the moves (rock, paper, or scissors), it sets the
 * moves for the user and generates a random move for the computer. After the
 * moves have been chosen, the label boxes turn into question marks to keep the
 * moves hidden until shown. After a delay, the user's move and the computer's
 * move will be shown with pictures in the label boxes. The winner is then
 * calculated depending on who the winner of rock paper scissors is. One point
 * is given to the winner after each round, and is displayed via a text box.
 * During a round of rock paper scissors, the button will be deactivated as to
 * prevent any errors that may cause.
 *
 * @author m.yan
 * @since 9-June-18
 */
public class GameScreen extends javax.swing.JFrame {
    //GLOBAL VARIABLES (below this line)
    private String result;

    private int computerMove;
    private int userMove;

    private int computerWins;
    private int userWins;

    private Timer delayer;
    private Timer delayer1;
    private Timer delayer2;
    private Timer delayer3;
    // END OF GLOBAL VARIABLES
    
    // RESUABLE VARIABLES AND METHODS (below this line)
    private final static int DELAY_TIME = 800;
    private final static String QUESTION_IMAGE = "/Images/QuestionMark.png";
    private final static String PAPER_IMAGE = "/Images/Paper.png";
    private final static String ROCK_IMAGE = "/Images/Rock.png";
    private final static String SCISSORS_IMAGE = "/Images/Scissors.png";
    // END OF REUSABLE VARIABLES

    /**
     * Creates new form GameScreen
     */
    public GameScreen() {
        setFrame();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rockButton = new javax.swing.JButton();
        paperButton = new javax.swing.JButton();
        scissorsButton = new javax.swing.JButton();
        userImage = new javax.swing.JLabel();
        computerImage = new javax.swing.JLabel();
        output = new javax.swing.JLabel();
        userScore = new javax.swing.JLabel();
        computerScore = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        rockButton.setText("Rock");
        rockButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rockButtonActionPerformed(evt);
            }
        });

        paperButton.setText("Paper");
        paperButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paperButtonActionPerformed(evt);
            }
        });

        scissorsButton.setText("Scissors");
        scissorsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scissorsButtonActionPerformed(evt);
            }
        });

        userScore.setText("User Wins = ");

        computerScore.setText("Computer Wins =");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addComponent(userScore, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(130, 130, 130)
                .addComponent(output, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(180, 180, 180)
                .addComponent(computerScore, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(userImage, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(176, 176, 176)
                .addComponent(computerImage, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(rockButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(160, 160, 160)
                .addComponent(paperButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(180, 180, 180)
                .addComponent(scissorsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userScore, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(output, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(computerScore, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userImage, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(computerImage, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(82, 82, 82)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rockButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(paperButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scissorsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This button is used to select the move "rock" for the user. After
     * activation, it then runs code to start the round of rock paper scissors.
     * That code is the main program where the game will take place, and only
     * occurs after the button have been pressed.
     * 
     * @param evt the action event caused by pressing (activating) the button
     */
    private void rockButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rockButtonActionPerformed
        userMove = 1;
        startRound();
    }//GEN-LAST:event_rockButtonActionPerformed

    /**
     * This button is used to select the move "paper" for the user. After
     * activation, it then runs code to start the round of rock paper scissors.
     * That code is the main program where the game will take place, and only
     * occurs after the button have been pressed.
     * 
     * @param evt the action event caused by pressing (activating) the button
     */
    private void paperButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paperButtonActionPerformed
        userMove = 2;
        startRound();
    }//GEN-LAST:event_paperButtonActionPerformed

    /**
     * This button is used to select the move "scissors" for the user. After
     * activation, it then runs code to start the round of rock paper scissors.
     * That code is the main program where the game will take place, and only
     * occurs after the button have been pressed.
     * 
     * @param evt the action event caused by pressing (activating) the button
     */
    private void scissorsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scissorsButtonActionPerformed
        userMove = 3;
        startRound();
    }//GEN-LAST:event_scissorsButtonActionPerformed

    /**
     * The main code of the JFrame.
     * 
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting 
        //code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the 
         * default look and feel.
         * For details see 
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing
                    .UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameScreen.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameScreen.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameScreen.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameScreen.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel computerImage;
    private javax.swing.JLabel computerScore;
    private javax.swing.JLabel output;
    private javax.swing.JButton paperButton;
    private javax.swing.JButton rockButton;
    private javax.swing.JButton scissorsButton;
    private javax.swing.JLabel userImage;
    private javax.swing.JLabel userScore;
    // End of variables declaration//GEN-END:variables

    /**
     * Sets the JFrame's title, size, visibility, and exit function.
     */
    private void setFrame() {
        this.setTitle("Rock Paper Scissors");
        this.setSize(1500, 1200);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }

    /**
     * Starts the code to run the round of rock paper scissors.
     */
    private void startRound() {
        setMoves();
        delayer2 = new Timer(DELAY_TIME, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                program();
                delayer2.stop();
            }
        });
        delayer2.start();
    }

    /**
     * Sets the move for the user and generates a move for the computer, while 
     * making the images into question marks.
     */
    private void setMoves() {
        buttonSwitch(false);
        changeLabel(userImage, QUESTION_IMAGE);
        delayer = new Timer(DELAY_TIME, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                computerMove();
                delayer.stop();
            }
        });
        delayer.start();
    }

    /**
     * Activates or inactivates all three buttons depending on given argument.
     * 
     * @param on if button is activated or not
     */
    private void buttonSwitch(boolean on) {
        rockButton.setEnabled(on);
        paperButton.setEnabled(on);
        scissorsButton.setEnabled(on);
    }

    /**
     * Sets the move for the computer, changing the computer's image into
     * a question mark and generating the computer's move.
     */
    private void computerMove() {
        changeLabel(computerImage, QUESTION_IMAGE);
        computerMove = random(1, 3);
    }

    /**
     * Changes the picture inside of the label depending on the given label
     * name and image path.
     * 
     * @param label the label that picture change will occur in
     * @param path the path of the image that will be used in the change
     */
    private void changeLabel(JLabel label, String path) {
        ImageIcon icon = new ImageIcon(getClass().getResource(path));
        label.setIcon(icon);
    }

    /**
     * Generates a random number (a double) in a range
     *
     * @param low the lowest double in the range
     * @param high the highest double in the range
     * @return random double in the range
     */
    private static double random(double low, double high) {
        return (high - low + 1d) * Math.random() + low;
    }

    /**
     * Generates a random number (an integer) in a range
     *
     * @param low the lowest integer in the range
     * @param high the highest integer in the range
     * @return random integer in the range
     */
    private static int random(int low, int high) {
        return (int) (random((double) low, (double) high));
    }

    /**
     * Reveals the moves of both user and computer after a delay, then
     * calculates the result and displays it. (Main code chunk for rock paper
     * scissors.
     */
    private void program() {
        delayer1 = new Timer(DELAY_TIME, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                reveal(userMove, userImage);
                reveal(computerMove, computerImage);
                result = calculateWin();
                showResults(result);
                buttonSwitch(true);
                delayer1.stop();
            }
        });
        delayer1.start();
    }

    /**
     * Reveals the chosen move of the given label box by image switching
     * depending on the rock paper scissors move.
     * 
     * @param move the chosen rock paper scissors move
     * @param name the path to the image to be changed to
     */
    private void reveal(int move, JLabel name) {
        if (move == 1) {
            changeLabel(name, ROCK_IMAGE);
        } else if (move == 2) {
            changeLabel(name, PAPER_IMAGE);
        } else {
            changeLabel(name, SCISSORS_IMAGE);
        }
    }

    /**
     * Calculates if the user wins, loses, or if it is a tie.
     * 
     * @return the result of the round after calculation (user perspective)
     */
    private String calculateWin() {
        if (userMove == computerMove) {
            result = "Tie";
        } else if (userMove == 1) {
            if (computerMove == 2) {
                result = "You Lose";
            } else if (computerMove == 3) {
                result = "You Win";
            }
        } else if (userMove == 2) {
            if (computerMove == 1) {
                result = "You Win";
            } else if (computerMove == 3) {
                result = "You Lose";
            }
        } else if (userMove == 3) {
            if (computerMove == 2) {
                result = "You Win";
            } else if (computerMove == 1) {
                result = "You Lose";
            }
        }
        return result;
    }

    /**
     * Displays the results of the round in a text box and updates the score
     * 
     * @param result the result of the round
     */
    private void showResults(String result) {
        output.setText(result);
        if (result == "You Win") {
            userWins++;
            userScore.setText("User Wins = " + userWins);
        } else if (result == "You Lose") {
            computerWins++;
            computerScore.setText("Computer Wins = " + computerWins);
        }
    }
}
